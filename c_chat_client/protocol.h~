#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <error.h>
#include <errno.h>
#include <pthread.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <pool.h>

#define REGISTER 0X01
#define LOGIN 0X02
#define LOGOUT 0X03
#define PERSON_CHAT 0X04
#define GROUP_CHAT 0X05
#define SERMSG 0x06

#define FAUSE -1

#define LISTEN  20
#define SERVER_PORT 8000
#define SERVER_ADDR "192.168.1.150"
#define NAMELEN 20
#define PASSWORD 32
#define BUFSIZE (sizeof(char) * 1024)
#define IDLEN 32
#define IPLEN 32

//主链表节点
typedef struct node
{
	int fd;
	char name[NAMELEN];
	int id;
	char password[PASSWORD];
	int online;

	struct node * next;
	struct node * pre;
}node;

//服务器数据包
typedef struct servermsg
{
	int len;
	char type;
	int acc_flag;
	char buf[BUFSIZE];
}sermsg;

//记录每个节点的fd
typedef struct list
{
	int fd;
	node *p_node;
}list;

//注册
typedef struct Reg
{
	int len;
	char type;
	char name[NAMELEN];
	char password[PASSWORD];
}Register;

//登录登出
typedef struct log
{
	int len;
	char type;
	int id;
	char password[PASSWORD];
}log;

//聊天
typedef struct chat
{
	int len;
	char type;
	int id;
	char buf[BUFSIZE];//通过此标记单聊和群聊
}chat;

//读
//失败返回-1，成功返回读入字符数
int my_read(int fd, char * buf, ssize_t size);

//写
//失败返回-1， 成功返回写入字符数
int my_write(int fd, char * buf, ssize_t size);
int Socket(int domain, int type, int protocol);
void set_server(struct sockaddr_in *s_info);
int Connect(int sockfd, struct sockaddr *serv_addr, int addrlen);
int fun_select();
void ClientSelect(int sock_fd,Register *P_Reg);
int Login_select();
void LoginSelect();
void * get_id(void * arg);
void Usr_Register(int sock_fd,Register *P_Reg);
